services:
  # Test database service
  db_test:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-bun_badges_test}
      # Optimize Postgres for testing
      POSTGRES_INITDB_ARGS: "--nosync"
      PGDATA: /var/lib/postgresql/data/pgdata
    command: postgres -c fsync=off -c synchronous_commit=off -c full_page_writes=off -c random_page_cost=1.0
    # ports: # Removed port mapping - connect via Docker network using service name
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      # - ./scripts/init-test-db.sql:/docker-entrypoint-initdb.d/init-test-db.sql
      # - ./scripts/test-db:/docker-entrypoint-initdb.d/schema
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"] # Use default user directly
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - bun-badges-network

  # Test runner service (Consolidated)
  test_runner:
    build:
      context: .
      dockerfile: Dockerfile.dev
    environment:
      # Keep variables potentially used by test scripts/runner logic
      - NODE_ENV=${NODE_ENV:-test}
      - E2E_TEST=${E2E_TEST:-false}
      - INTEGRATION_TEST=${INTEGRATION_TEST:-false}
      - TEST_MODE=${TEST_MODE:-false}
      - TEST_RUN_ID=${TEST_RUN_ID:-test-run}
      # Database connection variables
      - DATABASE_URL=postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db_test:5432/${POSTGRES_DB:-bun_badges_test}
      - DB_HOST=db_test
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - DB_NAME=${POSTGRES_DB:-bun_badges_test}
      # Other configuration
      - JWT_SECRET=${JWT_SECRET:-test-secret-key}
      - JWT_EXPIRY=${JWT_EXPIRY:-15m}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - PORT=${PORT:-3000}
      - HOST=${HOST:-0.0.0.0}
    depends_on:
      db_test:
        condition: service_healthy
    volumes:
      - .:/app
      - node_modules:/app/node_modules # Persist node_modules across runs
      - ./test-results:/app/test-results # Mount test results volume
    # Default command is essentially ignored when using `docker-compose run`
    # with a specific command override, but set a simple default.
    command: ["sh", "-c", "echo 'Test runner container ready. Use docker-compose run to execute tests.'"]
    networks:
      - bun-badges-network

  # Redis for caching (if needed by your app)
  redis_test:
    image: redis:alpine
    # ports: # Removed port mapping
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
    networks:
      - bun-badges-network

  # Test reports viewer service
  test_reporter:
    image: nginx:alpine
    volumes:
      - ./test-results:/usr/share/nginx/html
    # ports: # Removed port mapping
    depends_on:
      - test_runner
    networks:
      - bun-badges-network

volumes:
  postgres_test_data:
    driver: local
  node_modules:
    driver: local
  test-results:
    driver: local

networks:
  bun-badges-network: # Renamed from test_network
    driver: bridge
